'use client'

import { useState, useCallback } from 'react'
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"

interface Question {
  id: number
  question: string
  options?: string[]
  type: 'multiple-choice' | 'open-ended'
  correctAnswer?: string | number
  explanation: string
}

const questions: Question[] = [
  {
    id: 1,
    question: "O que significa 'livre de contexto' em uma gram√°tica?",
    type: 'multiple-choice',
    options: [
      "As regras podem ser aplicadas independentemente do contexto",
      "A gram√°tica n√£o possui contexto algum",
      "Todas as regras s√£o livres para usar",
      "O contexto √© opcional"
    ],
    correctAnswer: 0,
    explanation: "'Livre de contexto' significa que as substitui√ß√µes podem ser aplicadas independentemente do contexto onde o s√≠mbolo aparece."
  },
  {
    id: 2,
    question: "Qual √© a diferen√ßa entre terminal e n√£o-terminal?",
    type: 'multiple-choice',
    options: [
      "Terminal √© final, n√£o-terminal pode ser expandido",
      "Terminal √© vari√°vel, n√£o-terminal √© constante",
      "Terminal √© opcional, n√£o-terminal √© obrigat√≥rio",
      "N√£o h√° diferen√ßa"
    ],
    correctAnswer: 0,
    explanation: "Terminais s√£o s√≠mbolos finais da linguagem, enquanto n√£o-terminais (vari√°veis) podem ser expandidos usando regras de produ√ß√£o."
  },
  {
    id: 3,
    question: "D√™ um exemplo de regra de produ√ß√£o de uma GLC:",
    type: 'open-ended',
    explanation: "Exemplo: E ‚Üí E + E (uma express√£o pode ser duas express√µes somadas)"
  },
  {
    id: 4,
    question: "Qual √© a fun√ß√£o do s√≠mbolo inicial na gram√°tica?",
    type: 'multiple-choice',
    options: [
      "√â o ponto de partida para todas as deriva√ß√µes",
      "√â o s√≠mbolo mais importante",
      "√â opcional na gram√°tica",
      "Define o fim da gram√°tica"
    ],
    correctAnswer: 0,
    explanation: "O s√≠mbolo inicial (S) √© o ponto de partida para todas as deriva√ß√µes na gram√°tica."
  },
  {
    id: 5,
    question: "Onde as GLCs s√£o usadas em compiladores?",
    type: 'multiple-choice',
    options: [
      "Na an√°lise sint√°tica (parsing)",
      "Na an√°lise l√©xica apenas",
      "Na otimiza√ß√£o de c√≥digo",
      "Na gera√ß√£o de c√≥digo"
    ],
    correctAnswer: 0,
    explanation: "GLCs s√£o fundamentais na fase de an√°lise sint√°tica dos compiladores para verificar se o c√≥digo segue a estrutura correta."
  },
  {
    id: 6,
    question: "Uma GLC pode descrever a indenta√ß√£o de c√≥digo (como em Python)?",
    type: 'multiple-choice',
    options: [
      "N√£o, pois indenta√ß√£o √© sens√≠vel ao contexto",
      "Sim, facilmente",
      "Apenas com modifica√ß√µes especiais",
      "Somente em casos espec√≠ficos"
    ],
    correctAnswer: 0,
    explanation: "GLCs n√£o podem descrever indenta√ß√£o porque ela √© sens√≠vel ao contexto - o significado depende do n√≠vel de indenta√ß√£o anterior."
  },
  {
    id: 7,
    question: "O que acontece se uma gram√°tica gerar duas √°rvores para a mesma express√£o?",
    type: 'multiple-choice',
    options: [
      "A gram√°tica √© amb√≠gua",
      "A gram√°tica est√° correta",
      "Isso √© imposs√≠vel",
      "√â uma vantagem"
    ],
    correctAnswer: 0,
    explanation: "Quando uma gram√°tica pode gerar m√∫ltiplas √°rvores sint√°ticas para a mesma entrada, ela √© amb√≠gua, o que pode causar problemas na interpreta√ß√£o."
  },
  {
    id: 8,
    question: "Como GLC difere de Gram√°tica Regular?",
    type: 'multiple-choice',
    options: [
      "GLC √© mais poderosa, pode ter recurs√£o aninhada",
      "GLC √© mais simples",
      "GLC √© menos usada",
      "N√£o h√° diferen√ßa pr√°tica"
    ],
    correctAnswer: 0,
    explanation: "GLCs s√£o mais poderosas que gram√°ticas regulares, podendo expressar estruturas aninhadas como par√™nteses balanceados."
  },
  {
    id: 9,
    question: "Por que GLC √© importante no estudo de linguagens de programa√ß√£o?",
    type: 'multiple-choice',
    options: [
      "Define a sintaxe e estrutura das linguagens",
      "Apenas para fins acad√™micos",
      "Para otimiza√ß√£o de performance",
      "Para debugging"
    ],
    correctAnswer: 0,
    explanation: "GLCs s√£o fundamentais porque definem formalmente a sintaxe e estrutura das linguagens de programa√ß√£o, permitindo a constru√ß√£o de compiladores e interpretadores."
  },
  {
    id: 10,
    question: "Qual das seguintes √© uma caracter√≠stica das GLCs?",
    type: 'multiple-choice',
    options: [
      "Podem expressar linguagens recursivas",
      "Apenas para linguagens finitas",
      "N√£o permitem aninhamento",
      "S√£o limitadas a express√µes simples"
    ],
    correctAnswer: 0,
    explanation: "GLCs podem expressar linguagens recursivas e estruturas aninhadas, tornando-as ideais para linguagens de programa√ß√£o complexas."
  }
]

export function InteractiveQuiz() {
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null)
  const [showExplanation, setShowExplanation] = useState(false)
  const [score, setScore] = useState(0)
  const [quizCompleted, setQuizCompleted] = useState(false)
  const [openAnswer, setOpenAnswer] = useState('')

  const handleAnswerSelect = (answerIndex: number) => {
    setSelectedAnswer(answerIndex)
  }

  const handleNextQuestion = useCallback(() => {
    const question = questions[currentQuestion]
    
    if (question.type === 'multiple-choice' && selectedAnswer === question.correctAnswer) {
      setScore(prev => prev + 1)
    }
    
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(prev => prev + 1)
      setSelectedAnswer(null)
      setShowExplanation(false)
      setOpenAnswer('')
    } else {
      setQuizCompleted(true)
    }
  }, [currentQuestion, selectedAnswer])

  const handleShowExplanation = () => {
    setShowExplanation(true)
  }

  const resetQuiz = () => {
    setCurrentQuestion(0)
    setSelectedAnswer(null)
    setShowExplanation(false)
    setScore(0)
    setQuizCompleted(false)
    setOpenAnswer('')
  }

  if (quizCompleted) {
    return (
      <Card className="bg-gradient-to-br from-green-600/20 to-blue-800/20 backdrop-blur-sm border-green-300/20 p-8 text-center">
        <div className="text-6xl mb-6">üéâ</div>
        <h2 className="text-3xl font-bold text-white mb-4">Quiz Conclu√≠do!</h2>
        <p className="text-xl text-green-200 mb-6">
          Sua pontua√ß√£o: {score}/{questions.filter(q => q.type === 'multiple-choice').length}
        </p>
        <div className="mb-6">
          {score >= 7 ? (
            <p className="text-green-300">Excelente! Voc√™ domina os conceitos de GLC! üåü</p>
          ) : score >= 5 ? (
            <p className="text-yellow-300">Bom trabalho! Continue estudando para aprimorar! üìö</p>
          ) : (
            <p className="text-orange-300">Continue praticando! A teoria √© fundamental! üí™</p>
          )}
        </div>
        <Button 
          onClick={resetQuiz}
          className="bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white"
        >
          üîÑ Fazer Quiz Novamente
        </Button>
      </Card>
    )
  }

  const question = questions[currentQuestion]

  return (
    <Card className="bg-gradient-to-br from-purple-600/10 to-indigo-800/10 backdrop-blur-sm border-purple-300/20 p-8">
      {/* Progress */}
      <div className="mb-6">
        <div className="flex justify-between items-center mb-2">
          <span className="text-purple-200">Pergunta {currentQuestion + 1} de {questions.length}</span>
          <span className="text-purple-200">Pontua√ß√£o: {score}</span>
        </div>
        <div className="w-full bg-white/10 rounded-full h-2">
          <div 
            className="bg-gradient-to-r from-purple-500 to-indigo-500 h-2 rounded-full transition-all duration-300"
            style={{ width: `${((currentQuestion + 1) / questions.length) * 100}%` }}
          />
        </div>
      </div>

      {/* Question */}
      <h3 className="text-2xl font-bold text-white mb-6">{question.question}</h3>

      {/* Answer Options */}
      {question.type === 'multiple-choice' && question.options ? (
        <div className="space-y-4 mb-6">
          {question.options.map((option, index) => (
            <button
              key={index}
              onClick={() => handleAnswerSelect(index)}
              className={`w-full text-left p-4 rounded-lg border transition-all duration-200 ${
                selectedAnswer === index
                  ? 'bg-purple-500/30 border-purple-400 text-white'
                  : 'bg-white/5 border-white/20 text-purple-100 hover:bg-white/10'
              }`}
            >
              <span className="font-semibold mr-3">{String.fromCharCode(65 + index)}.</span>
              {option}
            </button>
          ))}
        </div>
      ) : (
        <div className="mb-6">
          <textarea
            value={openAnswer}
            onChange={(e) => setOpenAnswer(e.target.value)}
            placeholder="Digite sua resposta aqui..."
            className="w-full p-4 bg-white/10 border border-white/20 rounded-lg text-white placeholder-purple-300 min-h-[120px] resize-none"
          />
        </div>
      )}

      {/* Explanation */}
      {showExplanation && (
        <div className="mb-6 p-4 bg-blue-500/20 border border-blue-400/30 rounded-lg">
          <h4 className="font-bold text-blue-200 mb-2">üí° Explica√ß√£o:</h4>
          <p className="text-blue-100">{question.explanation}</p>
        </div>
      )}

      {/* Actions */}
      <div className="flex space-x-4">
        {!showExplanation ? (
          <Button
            onClick={handleShowExplanation}
            variant="outline"
            disabled={question.type === 'multiple-choice' && selectedAnswer === null}
            className="bg-blue-600/20 hover:bg-blue-600/30 border-blue-400/30 text-white"
          >
            üí° Ver Explica√ß√£o
          </Button>
        ) : (
          <Button
            onClick={handleNextQuestion}
            className="bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white"
          >
            {currentQuestion < questions.length - 1 ? 'Pr√≥xima Pergunta' : 'Finalizar Quiz'} ‚Üí
          </Button>
        )}
      </div>
    </Card>
  )
}