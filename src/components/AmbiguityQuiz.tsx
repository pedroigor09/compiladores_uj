'use client'

import { useState } from 'react'
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"

interface Question {
  id: number
  question: string
  options?: string[]
  type: 'multiple-choice' | 'open-ended'
  correctAnswer?: string | number
  explanation: string
}

const ambiguityQuestions: Question[] = [
  {
    id: 1,
    question: "O que √© uma gram√°tica amb√≠gua?",
    type: 'multiple-choice',
    options: [
      "Uma gram√°tica onde uma senten√ßa pode ter m√∫ltiplas √°rvores sint√°ticas",
      "Uma gram√°tica com muitas regras de produ√ß√£o",
      "Uma gram√°tica dif√≠cil de entender",
      "Uma gram√°tica sem s√≠mbolos terminais"
    ],
    correctAnswer: 0,
    explanation: "Uma gram√°tica √© amb√≠gua quando uma mesma senten√ßa pode ser derivada de mais de uma forma, gerando m√∫ltiplas √°rvores sint√°ticas diferentes."
  },
  {
    id: 2,
    question: "D√™ um exemplo de senten√ßa amb√≠gua:",
    type: 'open-ended',
    explanation: "Exemplo cl√°ssico: 'a + b * c' pode ser interpretada como '(a + b) * c' ou 'a + (b * c)' sem regras de preced√™ncia."
  },
  {
    id: 3,
    question: "Como resolver ambiguidade em express√µes matem√°ticas?",
    type: 'multiple-choice',
    options: [
      "Definindo regras de preced√™ncia e associatividade",
      "Removendo operadores da gram√°tica",
      "Usando apenas um tipo de operador",
      "Ignorando o problema"
    ],
    correctAnswer: 0,
    explanation: "Regras de preced√™ncia (*, / antes de +, -) e associatividade (esquerda para direita) eliminam a ambiguidade em express√µes matem√°ticas."
  },
  {
    id: 4,
    question: "Qual √© o cl√°ssico problema do 'dangling else'?",
    type: 'multiple-choice',
    options: [
      "else pode se associar a qualquer if em estruturas aninhadas",
      "else sem if correspondente",
      "if sem else obrigat√≥rio",
      "else com sintaxe incorreta"
    ],
    correctAnswer: 0,
    explanation: "Em 'if (a) if (b) X else Y', o else pode se associar ao primeiro ou segundo if, criando ambiguidade sobre qual condi√ß√£o controla o else."
  },
  {
    id: 5,
    question: "Como a preced√™ncia ajuda a resolver ambiguidades?",
    type: 'multiple-choice',
    options: [
      "Define qual operador tem prioridade na constru√ß√£o da √°rvore",
      "Remove operadores desnecess√°rios",
      "Simplifica a gram√°tica",
      "Acelera a compila√ß√£o"
    ],
    correctAnswer: 0,
    explanation: "Preced√™ncia estabelece uma hierarquia: operadores de maior preced√™ncia ficam mais baixos na √°rvore sint√°tica, sendo avaliados primeiro."
  },
  {
    id: 6,
    question: "Diferencie ambiguidade sint√°tica e sem√¢ntica:",
    type: 'multiple-choice',
    options: [
      "Sint√°tica: m√∫ltiplas estruturas; Sem√¢ntica: m√∫ltiplos significados",
      "Sint√°tica: erros de gram√°tica; Sem√¢ntica: erros de l√≥gica",
      "Sint√°tica: compila√ß√£o; Sem√¢ntica: execu√ß√£o",
      "N√£o h√° diferen√ßa pr√°tica"
    ],
    correctAnswer: 0,
    explanation: "Ambiguidade sint√°tica gera m√∫ltiplas √°rvores para o mesmo c√≥digo. Ambiguidade sem√¢ntica ocorre quando c√≥digo sintaticamente correto tem m√∫ltiplas interpreta√ß√µes de significado."
  },
  {
    id: 7,
    question: "√â poss√≠vel eliminar ambiguidade em todas as gram√°ticas?",
    type: 'multiple-choice',
    options: [
      "Nem sempre - algumas linguagens s√£o inerentemente amb√≠guas",
      "Sim, sempre √© poss√≠vel",
      "N√£o, nunca √© poss√≠vel",
      "Apenas em gram√°ticas simples"
    ],
    correctAnswer: 0,
    explanation: "Algumas linguagens formais s√£o inerentemente amb√≠guas - n√£o existe gram√°tica livre de contexto n√£o-amb√≠gua para elas. Por√©m, a maioria das linguagens de programa√ß√£o pode ser expressa sem ambiguidade."
  },
  {
    id: 8,
    question: "O que pode acontecer em um compilador com gram√°tica amb√≠gua?",
    type: 'multiple-choice',
    options: [
      "Comportamento imprevis√≠vel ou falha na compila√ß√£o",
      "Compila√ß√£o mais r√°pida",
      "Melhor otimiza√ß√£o de c√≥digo",
      "Nada, funciona normalmente"
    ],
    correctAnswer: 0,
    explanation: "Compiladores com gram√°ticas amb√≠guas podem escolher interpreta√ß√µes diferentes para o mesmo c√≥digo, causando comportamento inconsistente ou erros de compila√ß√£o."
  },
  {
    id: 9,
    question: "Por que as linguagens de programa√ß√£o evitam gram√°ticas amb√≠guas?",
    type: 'multiple-choice',
    options: [
      "Para garantir interpreta√ß√£o √∫nica e previs√≠vel do c√≥digo",
      "Para facilitar a digita√ß√£o",
      "Para reduzir o tamanho dos arquivos",
      "Para aumentar a velocidade de execu√ß√£o"
    ],
    correctAnswer: 0,
    explanation: "Linguagens n√£o-amb√≠guas garantem que cada programa tenha interpreta√ß√£o √∫nica, essencial para comportamento previs√≠vel e confi√°vel do software."
  },
  {
    id: 10,
    question: "Cite uma t√©cnica de compilador para evitar ambiguidade:",
    type: 'multiple-choice',
    options: [
      "Definir preced√™ncia e associatividade de operadores",
      "Usar apenas tokens simples",
      "Eliminar recurs√£o da gram√°tica",
      "Reduzir o n√∫mero de regras"
    ],
    correctAnswer: 0,
    explanation: "Definir preced√™ncia (qual operador tem prioridade) e associatividade (ordem de avalia√ß√£o para operadores de mesma preced√™ncia) √© a t√©cnica mais comum para resolver ambiguidades."
  }
]

export function AmbiguityQuiz() {
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null)
  const [showExplanation, setShowExplanation] = useState(false)
  const [score, setScore] = useState(0)
  const [quizCompleted, setQuizCompleted] = useState(false)
  const [openAnswer, setOpenAnswer] = useState('')

  const handleAnswerSelect = (answerIndex: number) => {
    setSelectedAnswer(answerIndex)
  }

  const handleNextQuestion = () => {
    const question = ambiguityQuestions[currentQuestion]
    
    if (question.type === 'multiple-choice' && selectedAnswer === question.correctAnswer) {
      setScore(score + 1)
    }
    
    if (currentQuestion < ambiguityQuestions.length - 1) {
      setCurrentQuestion(currentQuestion + 1)
      setSelectedAnswer(null)
      setShowExplanation(false)
      setOpenAnswer('')
    } else {
      setQuizCompleted(true)
    }
  }

  const handleShowExplanation = () => {
    setShowExplanation(true)
  }

  const resetQuiz = () => {
    setCurrentQuestion(0)
    setSelectedAnswer(null)
    setShowExplanation(false)
    setScore(0)
    setQuizCompleted(false)
    setOpenAnswer('')
  }

  if (quizCompleted) {
    return (
      <Card className="bg-gradient-to-br from-red-600/20 to-orange-800/20 backdrop-blur-sm border-red-300/20 p-8 text-center">
        <div className="text-6xl mb-6">ü§î</div>
        <h2 className="text-3xl font-bold text-white mb-4">Quiz de Ambiguidade Conclu√≠do!</h2>
        <p className="text-xl text-red-200 mb-6">
          Sua pontua√ß√£o: {score}/{ambiguityQuestions.filter(q => q.type === 'multiple-choice').length}
        </p>
        <div className="mb-6">
          {score >= 8 ? (
            <p className="text-green-300">Fant√°stico! Voc√™ √© expert em resolver ambiguidades! üéØ</p>
          ) : score >= 6 ? (
            <p className="text-yellow-300">Muito bem! Voc√™ entende os conceitos fundamentais! ‚ö°</p>
          ) : (
            <p className="text-orange-300">Continue estudando! Ambiguidade √© um t√≥pico complexo! üìö</p>
          )}
        </div>
        <Button 
          onClick={resetQuiz}
          className="bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-700 hover:to-orange-700 text-white"
        >
          üîÑ Refazer Quiz
        </Button>
      </Card>
    )
  }

  const question = ambiguityQuestions[currentQuestion]

  return (
    <Card className="bg-gradient-to-br from-red-600/10 to-orange-800/10 backdrop-blur-sm border-red-300/20 p-8">
      {/* Progress */}
      <div className="mb-6">
        <div className="flex justify-between items-center mb-2">
          <span className="text-red-200">Pergunta {currentQuestion + 1} de {ambiguityQuestions.length}</span>
          <span className="text-red-200">üéØ Score: {score}</span>
        </div>
        <div className="w-full bg-white/10 rounded-full h-3">
          <div 
            className="bg-gradient-to-r from-red-500 to-orange-500 h-3 rounded-full transition-all duration-500"
            style={{ width: `${((currentQuestion + 1) / ambiguityQuestions.length) * 100}%` }}
          />
        </div>
      </div>

      {/* Question */}
      <h3 className="text-2xl font-bold text-white mb-6">{question.question}</h3>

      {/* Answer Options */}
      {question.type === 'multiple-choice' && question.options ? (
        <div className="space-y-4 mb-6">
          {question.options.map((option, index) => (
            <button
              key={index}
              onClick={() => handleAnswerSelect(index)}
              className={`w-full text-left p-4 rounded-lg border transition-all duration-200 ${
                selectedAnswer === index
                  ? 'bg-red-500/30 border-red-400 text-white scale-[1.02] shadow-lg'
                  : 'bg-white/5 border-white/20 text-red-100 hover:bg-white/10 hover:border-red-400/50'
              }`}
            >
              <span className="font-bold mr-3 text-red-300">{String.fromCharCode(65 + index)}.</span>
              {option}
            </button>
          ))}
        </div>
      ) : (
        <div className="mb-6">
          <textarea
            value={openAnswer}
            onChange={(e) => setOpenAnswer(e.target.value)}
            placeholder="Descreva um exemplo de ambiguidade..."
            className="w-full p-4 bg-white/10 border border-white/20 rounded-lg text-white placeholder-red-300 min-h-[120px] resize-none"
          />
        </div>
      )}

      {/* Explanation */}
      {showExplanation && (
        <div className="mb-6 p-4 bg-orange-500/20 border border-orange-400/30 rounded-lg">
          <h4 className="font-bold text-orange-200 mb-2">ü§î Explica√ß√£o:</h4>
          <p className="text-orange-100">{question.explanation}</p>
        </div>
      )}

      {/* Actions */}
      <div className="flex space-x-4">
        {!showExplanation ? (
          <Button
            onClick={handleShowExplanation}
            variant="outline"
            disabled={question.type === 'multiple-choice' && selectedAnswer === null}
            className="bg-orange-600/20 hover:bg-orange-600/30 border-orange-400/30 text-white"
          >
            üí° Ver Explica√ß√£o
          </Button>
        ) : (
          <Button
            onClick={handleNextQuestion}
            className="bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-700 hover:to-orange-700 text-white"
          >
            {currentQuestion < ambiguityQuestions.length - 1 ? 'Pr√≥xima Pergunta' : 'Finalizar Quiz'} ‚Üí
          </Button>
        )}
      </div>
    </Card>
  )
}